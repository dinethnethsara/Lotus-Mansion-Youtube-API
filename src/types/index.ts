/**
 * Supported video platforms
 */
export enum Platform {
  YOUTUBE = 'youtube',
  TIKTOK = 'tiktok',
  INSTAGRAM = 'instagram',
  TWITTER = 'twitter',
  FACEBOOK = 'facebook',
  VIMEO = 'vimeo',
  DAILYMOTION = 'dailymotion',
  TWITCH = 'twitch',
  REDDIT = 'reddit',
  PINTEREST = 'pinterest',
  LINKEDIN = 'linkedin',
  SNAPCHAT = 'snapchat',
}

/**
 * Video quality options
 */
export enum Quality {
  HIGHEST = 'highest',
  LOWEST = 'lowest',
  AUDIO_ONLY = 'audio',
  HD = 'hd',
  SD = 'sd',
  UHD_4K = '4k',
  QHD_1440P = '1440p',
  FHD_1080P = '1080p',
  HD_720P = '720p',
  SD_480P = '480p',
  SD_360P = '360p',
  SD_240P = '240p',
  SD_144P = '144p',
}

/**
 * Video format options
 */
export enum Format {
  MP4 = 'mp4',
  MP3 = 'mp3',
  WEBM = 'webm',
  MKV = 'mkv',
  AVI = 'avi',
  FLV = 'flv',
  MOV = 'mov',
  OGG = 'ogg',
  WAV = 'wav',
  AAC = 'aac',
  M4A = 'm4a',
  GIF = 'gif',
}

/**
 * Subtitle information interface
 */
export interface SubtitleInfo {
  language: string;
  languageCode: string;
  url?: string;
  autoGenerated?: boolean;
}

/**
 * Chapter information interface
 */
export interface ChapterInfo {
  title: string;
  startTime: number; // in seconds
  endTime: number; // in seconds
}

/**
 * Geographic location interface
 */
export interface GeoLocation {
  latitude?: number;
  longitude?: number;
  country?: string;
  city?: string;
  address?: string;
}

/**
 * Video information interface
 */
export interface VideoInfo {
  title: string;
  description?: string;
  duration?: number; // in seconds
  thumbnail?: string;
  thumbnails?: string[]; // multiple thumbnails in different resolutions
  author?: string;
  authorUrl?: string;
  authorThumbnail?: string;
  url: string;
  platform: Platform;
  uploadDate?: string;
  views?: number;
  likes?: number;
  comments?: number;
  shares?: number;
  isLive?: boolean;
  isPrivate?: boolean;
  isAgeRestricted?: boolean;
  tags?: string[];
  categories?: string[];
  availableQualities?: string[];
  availableFormats?: string[];
  subtitles?: SubtitleInfo[];
  relatedVideos?: VideoInfo[];
  chapters?: ChapterInfo[];
  location?: GeoLocation;
  metadata?: Record<string, any>; // Additional platform-specific metadata
}

/**
 * Download progress interface
 */
export interface DownloadProgress {
  percentage: number;
  downloaded: number; // in bytes
  total: number; // in bytes
  speed: number; // in bytes per second
  eta: number; // estimated time of arrival in seconds
  timeElapsed: number; // in seconds
}

/**
 * Batch download progress interface
 */
export interface BatchDownloadProgress {
  percentage: number;
  completed: number;
  total: number;
  current?: {
    url: string;
    progress: DownloadProgress;
  };
}

/**
 * Proxy configuration interface
 */
export interface ProxyConfig {
  host: string;
  port: number;
  auth?: {
    username: string;
    password: string;
  };
  protocol?: 'http' | 'https' | 'socks4' | 'socks5';
}

/**
 * Authentication configuration interface
 */
export interface AuthConfig {
  username?: string;
  password?: string;
  cookies?: string | Record<string, string>;
  token?: string;
  sessionId?: string;
}

/**
 * Video processing operation types
 */
export type VideoOperation =
  | TrimOperation
  | MergeOperation
  | ExtractAudioOperation
  | AddWatermarkOperation
  | ResizeOperation
  | CompressOperation
  | AddSubtitlesOperation
  | RotateOperation
  | CropOperation
  | AdjustSpeedOperation;

/**
 * Trim video operation
 */
export interface TrimOperation {
  type: 'trim';
  startTime: string | number; // timestamp in seconds or format 'HH:MM:SS'
  endTime: string | number; // timestamp in seconds or format 'HH:MM:SS'
}

/**
 * Merge videos operation
 */
export interface MergeOperation {
  type: 'merge';
  inputs: string[]; // array of file paths
}

/**
 * Extract audio operation
 */
export interface ExtractAudioOperation {
  type: 'extractAudio';
  format?: Format; // output audio format
  bitrate?: number; // in kbps
}

/**
 * Add watermark operation
 */
export interface AddWatermarkOperation {
  type: 'addWatermark';
  imagePath: string;
  position?: 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight' | 'center';
  opacity?: number; // 0-1
  size?: number; // percentage of video size
}

/**
 * Resize video operation
 */
export interface ResizeOperation {
  type: 'resize';
  width?: number;
  height?: number;
  keepAspectRatio?: boolean;
}

/**
 * Compress video operation
 */
export interface CompressOperation {
  type: 'compress';
  preset?: 'ultrafast' | 'superfast' | 'veryfast' | 'faster' | 'fast' | 'medium' | 'slow' | 'slower' | 'veryslow';
  crf?: number; // 0-51, lower means better quality
  bitrate?: string; // e.g. '1M', '500k'
}

/**
 * Add subtitles operation
 */
export interface AddSubtitlesOperation {
  type: 'addSubtitles';
  subtitlePath: string;
  language?: string;
  default?: boolean;
}

/**
 * Rotate video operation
 */
export interface RotateOperation {
  type: 'rotate';
  angle: 90 | 180 | 270; // rotation angle in degrees
}

/**
 * Crop video operation
 */
export interface CropOperation {
  type: 'crop';
  x: number; // start x position
  y: number; // start y position
  width: number;
  height: number;
}

/**
 * Adjust video speed operation
 */
export interface AdjustSpeedOperation {
  type: 'adjustSpeed';
  speed: number; // 0.5 = half speed, 2.0 = double speed
  preservePitch?: boolean;
}

/**
 * Download options interface
 */
export interface DownloadOptions {
  quality?: Quality;
  format?: Format;
  outputPath?: string;
  fileName?: string;
  includeAudio?: boolean;
  includeVideo?: boolean;
  metadata?: boolean;
  subtitles?: boolean | string[]; // true for all, array of language codes for specific languages
  thumbnails?: boolean;
  chapters?: boolean;
  proxy?: ProxyConfig;
  headers?: Record<string, string>;
  cookies?: string | Record<string, string>;
  timeout?: number; // in milliseconds
  maxRetries?: number;
  retryDelay?: number; // in milliseconds
  concurrency?: number; // for batch downloads
  rateLimit?: number; // in bytes per second
  onProgress?: (progress: DownloadProgress) => void;
  overwrite?: boolean;
  skipExisting?: boolean;
  videoProcessing?: VideoOperation[];
}

/**
 * Batch download options
 */
export interface BatchDownloadOptions extends DownloadOptions {
  concurrency?: number;
  onProgress?: (progress: BatchDownloadProgress) => void;
}

/**
 * Download result interface
 */
export interface DownloadResult {
  success: boolean;
  message?: string;
  filePath?: string;
  videoInfo?: VideoInfo;
  error?: Error;
  duration?: number; // download duration in milliseconds
  size?: number; // file size in bytes
}

/**
 * Playlist information interface
 */
export interface PlaylistInfo {
  id: string;
  title: string;
  description?: string;
  thumbnail?: string;
  author?: string;
  authorUrl?: string;
  url: string;
  platform: Platform;
  videoCount: number;
  videos: VideoInfo[];
  isPrivate?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

/**
 * Channel information interface
 */
export interface ChannelInfo {
  id: string;
  name: string;
  description?: string;
  thumbnail?: string;
  url: string;
  platform: Platform;
  subscriberCount?: number;
  videoCount?: number;
  viewCount?: number;
  joinDate?: string;
  country?: string;
  playlists?: PlaylistInfo[];
  latestVideos?: VideoInfo[];
  isVerified?: boolean;
}

/**
 * Video processing options
 */
export interface VideoProcessingOptions {
  inputPath?: string;
  outputPath: string;
  operations: VideoOperation[];
  overwrite?: boolean;
}

/**
 * Video processing result
 */
export interface VideoProcessingResult {
  success: boolean;
  message?: string;
  inputPath?: string;
  outputPath: string;
  duration?: number; // in seconds
  size?: number; // in bytes
  error?: Error;
}

/**
 * Schedule types for scheduled downloads
 */
export type ScheduleType = 'once' | 'daily' | 'weekly' | 'monthly';

/**
 * Days of the week for weekly schedules
 */
export type DayOfWeek = 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';

/**
 * Schedule configuration
 */
export interface ScheduleConfig {
  date: Date; // start date/time
  repeat?: ScheduleType;
  days?: DayOfWeek[]; // for weekly schedule
  dayOfMonth?: number; // for monthly schedule (1-31)
  endDate?: Date; // end date for repeating schedules
}

/**
 * Scheduled download options
 */
export interface ScheduledDownloadOptions {
  url: string;
  options: DownloadOptions;
  schedule: ScheduleConfig;
  onComplete?: (result: DownloadResult) => void;
  onError?: (error: Error) => void;
}

/**
 * Scheduled download control
 */
export interface ScheduledDownloadControl {
  id: string;
  cancel: () => void;
  pause: () => void;
  resume: () => void;
  getStatus: () => ScheduledDownloadStatus;
}

/**
 * Scheduled download status
 */
export interface ScheduledDownloadStatus {
  id: string;
  url: string;
  nextRun: Date;
  isPaused: boolean;
  lastRun?: {
    date: Date;
    result: DownloadResult;
  };
}

/**
 * Live stream recording options
 */
export interface LiveStreamRecordingOptions {
  outputPath: string;
  fileName?: string;
  format?: Format;
  quality?: Quality;
  segmentSize?: number; // in seconds
  maxDuration?: number; // in seconds
  onStart?: () => void;
  onEnd?: () => void;
  onError?: (error: Error) => void;
  onProgress?: (progress: DownloadProgress) => void;
}

/**
 * Live stream recording control
 */
export interface LiveStreamRecordingControl {
  id: string;
  stop: () => Promise<void>;
  pause: () => void;
  resume: () => void;
  getStatus: () => LiveStreamRecordingStatus;
}

/**
 * Live stream recording status
 */
export interface LiveStreamRecordingStatus {
  id: string;
  url: string;
  isRecording: boolean;
  isPaused: boolean;
  duration: number; // in seconds
  size: number; // in bytes
  startTime: Date;
}

/**
 * Base downloader interface
 */
export interface Downloader {
  /**
   * Get information about a video
   * @param url Video URL
   */
  getInfo(url: string): Promise<VideoInfo>;

  /**
   * Download a video
   * @param url Video URL
   * @param options Download options
   */
  download(url: string, options?: DownloadOptions): Promise<DownloadResult>;

  /**
   * Validate if the URL is supported by this downloader
   * @param url URL to validate
   */
  validateURL(url: string): boolean;

  /**
   * Get information about a playlist
   * @param url Playlist URL
   */
  getPlaylistInfo?(url: string): Promise<PlaylistInfo>;

  /**
   * Download a playlist
   * @param url Playlist URL
   * @param options Download options
   */
  downloadPlaylist?(url: string, options?: BatchDownloadOptions): Promise<DownloadResult[]>;

  /**
   * Get information about a channel
   * @param url Channel URL
   */
  getChannelInfo?(url: string): Promise<ChannelInfo>;

  /**
   * Download all videos from a channel
   * @param url Channel URL
   * @param options Download options
   */
  downloadChannel?(url: string, options?: BatchDownloadOptions): Promise<DownloadResult[]>;

  /**
   * Set authentication for the platform
   * @param auth Authentication configuration
   */
  setAuthentication?(auth: AuthConfig): void;

  /**
   * Record a live stream
   * @param url Live stream URL
   * @param options Recording options
   */
  recordLiveStream?(url: string, options?: LiveStreamRecordingOptions): Promise<LiveStreamRecordingControl>;
}
